const { ApplicationCommandOptionType, ButtonBuilder, ButtonStyle, ActionRowBuilder, PermissionsBitField, TextChannel } = require('discord.js');
const { EmbedBuilder } = require('discord.js');

const choices = [
    { name: "ÏãúÏÑ§Í¥ÄÎ¶¨Î∂Ä", emoji: "üõ†", role: "ÏãúÏÑ§Í¥ÄÎ¶¨Î∂Ä" },
    { name: "ÏÉùÌôúÏßÄÎèÑÎ∂Ä", emoji: "‚è∞", role: "ÏÉùÌôúÏßÄÎèÑÎ∂Ä" },
    { name: "ÌïôÏäµÍ¥ÄÎ¶¨Î∂Ä", emoji: "üíª", role: "ÌïôÏäµÍ¥ÄÎ¶¨Î∂Ä" },
    { name: "Í∏∞ÌÉÄ", emoji: "üé∏", role: "ÏûêÏπòÌöå" },
];

const close = [
    { name: "Îã´Í∏∞", emoji: "üîí" }
];

module.exports = {
    name: 'Ìã∞Ïºì',
    description: 'Ìã∞ÏºìÏùÑ ÏóÖÎ°úÎìú Ìï† Ï±ÑÎÑêÏùÑ ÏÑ†ÌÉùÌïòÍ≥† Ìã∞ÏºìÏùÑ Î≥¥ÎÉÖÎãàÎã§.',
    devOnly: true,
    testOnly: true,
    deleted: false,
    options: [
        {
            name: 'Ï±ÑÎÑê',
            description: 'Îì±Î°ùÌï† Ï±ÑÎÑêÏùò Ïù¥Î¶Ñ',
            required: true,
            type: ApplicationCommandOptionType.Channel,
        },
    ],

    callback: async (client, interaction) => {
        const channelId = interaction.options.get("Ï±ÑÎÑê")?.value;
        const channel = await client.channels.fetch(channelId);

        await interaction.reply(`<#${channelId}> Ï±ÑÎÑêÎ°ú ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.`);

        const ticketEmbed = new EmbedBuilder()
            .setTitle('Í∏∞ÏàôÏÇ¨ ÎÇ¥ ÌååÏÜêÎêú Î¨ºÌíà Î¨∏Ïùò & Í±¥ÏùòÏÇ¨Ìï≠')
            .setDescription('Î¨∏Ïùò Ïãú ÏãúÏÑ§Í¥ÄÎ¶¨, ÌïôÏäµÍ¥ÄÎ¶¨, ÏÉùÌôúÏßÄÎèÑ Ï§ë ÏïåÎßûÏùÄ Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.\nÍ∑∏ Ïô∏Ïùò ÎÇ¥Ïö©ÏùÄ Í∏∞ÌÉÄ Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî.\nÎã´Í∏∞ Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ ÏÉùÏÑ±Îêú Ï±ÑÎÑêÏù¥ ÏÇ≠Ï†úÎê©ÎãàÎã§.')
            .setColor('#FFFFFF');

        const buttons = choices.map(({ name, emoji }) =>
            new ButtonBuilder()
                .setCustomId(name)
                .setLabel(name)
                .setStyle(ButtonStyle.Primary)
                .setEmoji(emoji)
        );

        const row = new ActionRowBuilder().addComponents(buttons);
        await channel.send({ embeds: [ticketEmbed], components: [row] });

        const handleButtonInteraction = async (buttonInteraction) => {
            if (!buttonInteraction.isButton()) return;

            const userChoice = choices.find(({ name }) => name === buttonInteraction.customId);
            if (userChoice) {
                const guild = interaction.guild;
                const role = guild.roles.cache.find(role => role.name === userChoice.role);

                const permissionOverwrites = [
                    {
                        id: guild.id,
                        deny: [PermissionsBitField.Flags.ViewChannel],
                    },
                    {
                        id: buttonInteraction.user.id,
                        allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
                    },
                ];

                const newChannel = await guild.channels.create({
                    name: `${userChoice.name} Î¨∏Ïùò`,
                    type: TextChannel,
                    reason: 'Ï±ÑÌåÖ ÏÉùÏÑ±',
                    permissionOverwrites
                });

                // Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥Îèô
                const categoryId = '1270048421373280367';

                if (categoryId) {
                    await newChannel.setParent(categoryId, { lockPermissions: false });
                }

                if (role) {
                    const interactionUser = await interaction.guild.members.fetch(buttonInteraction.user.id);

                    const currentTime = new Date().toLocaleTimeString('ko-KR', { hour12: false });

                    const inChannelEmbed = new EmbedBuilder()
                        .setTitle(`ÏïàÎÖïÌïòÏÑ∏Ïöî, ${interactionUser.nickname}Îãò!\nÎ¨∏Ï†úÍ∞Ä Ìï¥Í≤∞ÎêòÏóàÎã§Î©¥ ÏïÑÎûòÏùò Îã´Í∏∞ Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî`)
                        .setFields()
                        .setFooter({ text: `${currentTime}` })
                        .setColor('#FFFFFF');

                    const buttons = close.map(({ name, emoji }) =>
                        new ButtonBuilder()
                            .setCustomId(name)
                            .setLabel(name)
                            .setStyle(ButtonStyle.Primary)
                            .setEmoji(emoji)
                    );

                    const button = new ActionRowBuilder().addComponents(buttons);

                    await newChannel.send({ content: `${role}, ${buttonInteraction.user}`, embeds: [inChannelEmbed], components: [button] });
                }
            } else if (buttonInteraction.customId === 'Îã´Í∏∞') {
                await closeChannel(buttonInteraction.channel);
            }
        }

        client.on('interactionCreate', handleButtonInteraction);
    },
};

async function closeChannel(channel) {
    await channel.delete();

    console.log(`${channel.name} has been deleted`);
}